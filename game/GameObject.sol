
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;
import 'IGameObject.sol';

contract GameObject is IGameObject{

    uint private healthPoints;
    uint private armorPoints;


    constructor() public {
        require(tvm.pubkey() != 0, 101);
        require(msg.pubkey() == tvm.pubkey(), 102);
        tvm.accept();
    }

    modifier checkOwnerAndAccept() {
        tvm.accept();
        _;
    }


    function setArmor(uint _armorPoints) virtual public checkOwnerAndAccept{
        armorPoints+=_armorPoints;
    }

    function getAttack(uint damageValue) virtual external override checkOwnerAndAccept{
        if(damageValue>armorPoints){
            healthPoints -= damageValue - armorPoints;
        }
        else{
            armorPoints -= damageValue;
        }
        if(damageValue>healthPoints+armorPoints){
            healthPoints=0;
            sendMoneyAndSelfDestroy(msg.sender);
        }
        if(isDead()){
            sendMoneyAndSelfDestroy(msg.sender);
        }

    }

    function sendMoneyAndSelfDestroy(address dest) virtual public checkOwnerAndAccept {
        dest.transfer(1, true, 160);
    }

    function isDead() virtual public checkOwnerAndAccept returns (bool) {
        if(healthPoints < 0){
            return true;
        } 
        return false;
    }
}
